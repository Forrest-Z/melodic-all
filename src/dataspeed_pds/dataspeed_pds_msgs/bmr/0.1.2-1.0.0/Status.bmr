class update_dataspeed_pds_msgs_Status_937e393dbd72b45c2bc1751adb045890(MessageUpdateRule):
	old_type = "dataspeed_pds_msgs/Status"
	old_full_text = """
Header header
Mode mode
Script script
ChannelStatus[24] channel_status
bool inverter_master
bool inverter_slave
float32 board_temp_master
float32 board_temp_slave
float32 thermocouple_temp_master
float32 thermocouple_temp_slave
float32 voltage_master
float32 voltage_slave

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: dataspeed_pds_msgs/Mode
# The actual value of the mode enum.
uint8 mode

# An enumeration of the possible values of the mode enum.
uint8 AUTO=0
uint8 MANUAL=1
uint8 VALET=2
================================================================================
MSG: dataspeed_pds_msgs/Script
# The actual value of the script enum.
uint8 script

# An enumeration of the possible values of the script enum.
uint8 NONE=0
uint8 STARTUP=1
uint8 SHUTDOWN=2
================================================================================
MSG: dataspeed_pds_msgs/ChannelStatus
# The actual value of the channel status enum.
uint8 status

# An enumeration of the possible values of the channel_status enum.
uint8 OFF=0
uint8 ON=1
uint8 NO_LOAD=2
uint8 BAD_RELAY=3
uint8 BAD_FUSE=4
uint8 OVER_CURRENT=5
"""

	new_type = "dataspeed_pds_msgs/Status"
	new_full_text = """
Header header

# Channels (12|24|36|48)
Channel[] chan

# Mode status
Mode mode

# Script status
Script script

# Master/Slave common values (inverter/temperature/voltage)
Common master
Common[] slave

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: dataspeed_pds_msgs/Channel
# Current (Amps)
float32 current

# Status
uint8 status
uint8 OFF=0
uint8 ON=1
uint8 NO_LOAD=2
uint8 BAD_RELAY=3
uint8 BAD_FUSE=4
uint8 OVER_CURRENT=5

================================================================================
MSG: dataspeed_pds_msgs/Mode
# The actual value of the mode enum.
uint8 mode

# An enumeration of the possible values of the mode enum.
uint8 AUTO=0
uint8 MANUAL=1
uint8 VALET=2
================================================================================
MSG: dataspeed_pds_msgs/Script
# The actual value of the script enum.
uint8 script

# An enumeration of the possible values of the script enum.
uint8 NONE=0
uint8 STARTUP=1
uint8 SHUTDOWN=2
================================================================================
MSG: dataspeed_pds_msgs/Common
# Inverter (13th channel)
Inverter inverter

# Temperatures
Temperature temp

# Voltage
float32 voltage

================================================================================
MSG: dataspeed_pds_msgs/Inverter
bool request
bool status
bool overload
bool overtemp

================================================================================
MSG: dataspeed_pds_msgs/Temperature
# Temperature (C)
float32 internal
float32 external
"""

	order = 1
	migrated_types = [
		("Header","Header"),
		("Mode","Mode"),
		("Script","Script"),]

	valid = True

	def update(self, old_msg, new_msg):
		self.migrate(old_msg.header, new_msg.header)
		new_msg.chan = []
		for i in range(0,12):
			chan = self.get_new_class('dataspeed_pds_msgs/Channel')()
			chan.current = 0.0;
			chan.status = old_msg.channel_status[i].status
			new_msg.chan.append(chan);
		self.migrate(old_msg.mode, new_msg.mode)
		self.migrate(old_msg.script, new_msg.script)
		new_msg.master = self.get_new_class('dataspeed_pds_msgs/Common')()
		new_msg.master.inverter.request = old_msg.inverter_master
		new_msg.master.inverter.status = old_msg.inverter_master
		new_msg.master.inverter.overload = False
		new_msg.master.inverter.overtemp = False
		new_msg.master.temp.internal = old_msg.board_temp_master
		new_msg.master.temp.external = old_msg.thermocouple_temp_master
		new_msg.master.voltage = old_msg.voltage_master
		new_msg.slave = []
